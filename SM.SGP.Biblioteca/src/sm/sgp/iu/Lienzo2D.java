package sm.sgp.iu;

import sm.sgp.graficos.MiRectangulo;
import sm.sgp.graficos.MiElipse;
import sm.sgp.graficos.MiLinea;
import java.awt.AlphaComposite;
import java.awt.BasicStroke;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Shape;
import java.awt.geom.*;
import java.awt.Color;
import java.awt.Composite;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.Stroke;
import java.util.List;
import java.util.ArrayList;

public class Lienzo2D extends javax.swing.JPanel {

    public enum Herramienta {
        LINEA,
        RECTANGULO,
        ELIPSE
    }

    private Color color = Color.black;
    private Herramienta herramienta = Herramienta.LINEA;
    private boolean relleno = false;
    private boolean mover = false;

    private Point posicionPressed = new Point(0, 0);
    private Point posicionDragged = new Point(0, 0);

    private Shape forma = new Line2D.Float();
    private List<Shape> vShape = new ArrayList<>();

    private Stroke trazo = new BasicStroke();

    private Composite transparencia = AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 1.0f);
    private boolean transparenciaActiva = false;

    private RenderingHints alisado = new RenderingHints(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_OFF);
    private boolean alisadoActivo = false;

    public Lienzo2D() {
        initComponents();
    }

    @Override
    public void paint(Graphics g) {
        super.paint(g);

        g.setColor(Color.white);
        g.fillRect(0, 0, this.getWidth(), this.getHeight());

        Graphics2D g2d = (Graphics2D) g;
        g2d.setRenderingHints(alisado);
        g2d.setComposite(transparencia);
        g2d.setStroke(trazo);
        g2d.setPaint(color);
        if (transparenciaActiva) {
            transparencia = AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.5f);
        } else {
            transparencia = AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 1.0f);
        }

        if (alisadoActivo) {
            alisado = new RenderingHints(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        } else {
            alisado = new RenderingHints(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_OFF);
        }

        for (Shape s : vShape) {
            if (relleno) {
                g2d.fill(s);
            }

            g2d.draw(s);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    public boolean isMoverActivo() {
        return mover;
    }

    public void setMoverActivo(boolean mover) {
        this.mover = mover;
    }

    public Color getColor() {
        return color;
    }

    public void setColor(Color color) {
        this.color = color;
    }

    public boolean isRellenoActivo() {
        return relleno;
    }

    public void setRellenoActivo(boolean relleno) {
        this.relleno = relleno;
    }

    public Herramienta getHerramienta() {
        return herramienta;
    }

    public void setHerramienta(Herramienta herramienta) {
        this.herramienta = herramienta;
    }

    public void borrar() {
        this.vShape.clear();
        this.repaint();
    }

    public void setGrosor(int grosor) {
        this.trazo = new BasicStroke(grosor);
        this.repaint();
    }

    public Stroke getGrosor() {
        return trazo;
    }

    public void setTransparenciaActiva(boolean transparenciaActiva) {
        this.transparenciaActiva = transparenciaActiva;
    }

    public boolean isTransparenciaActiva() {
        return transparenciaActiva;
    }

    public void setAlisadoActivo(boolean alisadoActivo) {
        this.alisadoActivo = alisadoActivo;
    }

    public boolean isAlisadoActivo() {
        return alisadoActivo;
    }

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        this.posicionPressed = evt.getPoint();

        if (mover) {
            forma = figuraSeleccionada(evt.getPoint());
        } else {
            Shape formaAux = null;
            switch (herramienta) {
                case LINEA:
                    formaAux = new MiLinea(posicionPressed, posicionPressed);
                    break;
                case RECTANGULO:
                    formaAux = new MiRectangulo();
                    ((MiRectangulo) formaAux).setFrameFromDiagonal(posicionPressed, posicionPressed);
                    break;
                case ELIPSE:
                    formaAux = new MiElipse();
                    ((MiElipse) formaAux).setFrameFromDiagonal(posicionPressed, posicionPressed);
                    break;
            }

            if (formaAux != null) {
                this.forma = formaAux;
                this.vShape.add(forma);
            }
        }
    }//GEN-LAST:event_formMousePressed

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        this.posicionDragged = evt.getPoint();

        if (mover) {
            if (forma != null) {
                if (forma instanceof MiLinea) {
                    ((MiLinea) forma).setLocation(posicionDragged);
                } else if (forma instanceof MiRectangulo) {
                    ((MiRectangulo) forma).setLocation(posicionDragged);
                } else if (forma instanceof MiElipse) {
                    ((MiElipse) forma).setLocation(posicionDragged);
                }
            }
        } else {

            if (forma != null) {
                switch (herramienta) {
                    case LINEA:
                        ((MiLinea) forma).setLine(posicionPressed, posicionDragged);
                        break;
                    case RECTANGULO:
                        ((MiRectangulo) forma).setFrameFromDiagonal(posicionPressed, posicionDragged);
                        break;
                    case ELIPSE:
                        ((MiElipse) forma).setFrameFromDiagonal(posicionPressed, posicionDragged);
                        break;
                }
            }
        }
        this.repaint();
    }//GEN-LAST:event_formMouseDragged

    private Shape figuraSeleccionada(Point2D p) {
        for (Shape s : vShape) {
            if (s.contains(p)) {
                return s;
            }
        }
        return null;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
